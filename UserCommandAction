
package gothic;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.lang.*;
import java.awt.event.*;
import java.awt.geom.*;

/**
 *
 * @author swacisko
 */


public class UserCommandAction extends KeyWords {
    public UserCommandAction(){
        setKeyWords();
    }
    
    public void setCommandName( String newCommandName ){
        commandName = newCommandName;
    }
    public String getCommandName(){
        return new String( commandName );
    }
    
    public void addProneToActionObject( Object obj ){
        proneToAction.add( obj );
    }
    
    public void setKeyWords(){}
    
    private String commandName;    
    private ArrayList<Object> proneToAction = new ArrayList<>(50); // objects that are associated with action
            // e.g Diego is associated with Go To action, Fight Action ...
}

//********************************************************************************* FightCommand
class FightCommand extends UserCommandAction{
    public FightCommand(){
        super();
        setCommandName( GothicConstants.FightAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "fight" );
        addKeyWord( "kill" );
        addKeyWord( "defeat" );
    }
}

//********************************************************************************* GoToCommand
class GoToCommand extends UserCommandAction{
    public GoToCommand(){
        super();
        setCommandName( GothicConstants.GoToAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "go to" );
        addKeyWord( "find" );
        addKeyWord( "search" );
        addKeyWord( "seek" );
        addKeyWord( "look for" );
        addKeyWord( "move to" );
    }
}

//********************************************************************************** EscapeCommand
class EscapeCommand extends UserCommandAction{
    public EscapeCommand(){
        super();
        setCommandName( GothicConstants.EscapeAction );
    }   
    
    @Override
    public void setKeyWords(){
        addKeyWord( "run" );
        addKeyWord( "escape" );
        addKeyWord( "flee" );
        addKeyWord( "get away" );
    }
}

//******************************************************************************** PICK COMMAND
/*klasa PickCommand - jezeli uzytkownik bedzie chcial cos podniesc, to zostanie wywolana funkcja pick na rzecz
 * pewnego obiektu zawartego w  liscie proneToAction tej klasy
 * 
 */
class PickCommand extends UserCommandAction{
    public PickCommand(){
        super();
        setCommandName( GothicConstants.PickAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "pick" );
        addKeyWord( "pick up" );
        addKeyWord( "lift" );
        addKeyWord( "take" );
        addKeyWord( "steal" ); // jesli chce cos ukrasc, to jest to rownowazne z akcja PickCommand
    }
}
//*********************************************************************************************************
/* klasa NoCommand - jesli z polecenia uzytkownika nie zostanie znaleziona zadna inna akcja UCA to zostanie
 * zwrocony egzemplarz NoCommand. Wtedy powinno zostac zwrocone polecenie sparafrazowania polecenia uzytkownika
 * lub tez
 */
class NoCommand extends UserCommandAction{ 
                                               
    public NoCommand(){
        super();
    }
    
    public String getRandomAnswer(){
        int r = new Random().nextInt( answers.length );
        return new String( answers[r] );
    }
    
    private String[] answers = {
        "I don't understand, can you repeat?",
        "Please state your will more precisely",
        "You can't do that!",
        "What are you talking about?",
        "That's impossible!",
        "Please tell me what do you mean once again",
        "I have no idea what you are talking about...",
        "I'm confused...I didn't understand a single word..."
    };
    
}


